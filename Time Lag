{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "mount_file_id": "1oogaEMHQotFSMnuD-_pP42625naM3kTl",
      "authorship_tag": "ABX9TyNY+kiFkz3a8wa7JKlpMEwO",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/akshar99/AI-Trading/blob/main/Time%20Lag\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hURgBcOAzxvI"
      },
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import seaborn as sns \n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import Lasso \n",
        "from sklearn.metrics import mean_absolute_error ,accuracy_score"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bVQfonAp0U_1"
      },
      "source": [
        "da = pd.read_csv('/content/drive/MyDrive/python/Da.csv')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "p2SYvCtm0XFT"
      },
      "source": [
        "da = da.drop(columns='Unnamed: 0' , axis=1)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "g_54NJq-0a2J",
        "outputId": "77a8f2cb-38c1-4800-829b-355a4db8a2be"
      },
      "source": [
        "da.mean()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Open                 1.074062e+04\n",
              "High                 1.082439e+04\n",
              "Low                  1.062741e+04\n",
              "Close                1.072151e+04\n",
              "Volume               6.787893e+08\n",
              "Turnover (Rs. Cr)    2.990873e+04\n",
              "Percentage Change   -1.911225e-01\n",
              "Pivot                1.071933e+04\n",
              "R1                   1.081649e+04\n",
              "R2                   1.091670e+04\n",
              "S1                   1.072239e+04\n",
              "S2                   1.052197e+04\n",
              "NIFTY                1.072151e+04\n",
              "Moving Average 5     1.069550e+04\n",
              "Moving Average 10    1.066123e+04\n",
              "Moving Average 20    1.059132e+04\n",
              "Moving Average 50    1.036312e+04\n",
              "fib                 -1.911225e+01\n",
              "TR                   2.285138e+02\n",
              "ATR                  2.317866e+02\n",
              "Upper Basic          1.131705e+04\n",
              "Lower Basic          9.926330e+03\n",
              "Upper Band           1.107730e+04\n",
              "Lower Band           1.010384e+04\n",
              "SuperTrend           1.105482e+04\n",
              "ST_Up                1.094519e+04\n",
              "ST_Down              1.114423e+04\n",
              "dtype: float64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PgBwIxla0tGB"
      },
      "source": [
        "da = da.fillna(da.mean())"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GEmzLdwQ0zaz",
        "outputId": "aad33dca-328a-4207-83da-7e2d90d79bea"
      },
      "source": [
        "da.mean()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Open                 1.074062e+04\n",
              "High                 1.082439e+04\n",
              "Low                  1.062741e+04\n",
              "Close                1.072151e+04\n",
              "Volume               6.787893e+08\n",
              "Turnover (Rs. Cr)    2.990873e+04\n",
              "Percentage Change   -1.911225e-01\n",
              "Pivot                1.071933e+04\n",
              "R1                   1.081649e+04\n",
              "R2                   1.091670e+04\n",
              "S1                   1.072239e+04\n",
              "S2                   1.052197e+04\n",
              "NIFTY                1.072151e+04\n",
              "Moving Average 5     1.069550e+04\n",
              "Moving Average 10    1.066123e+04\n",
              "Moving Average 20    1.059132e+04\n",
              "Moving Average 50    1.036312e+04\n",
              "fib                 -1.911225e+01\n",
              "TR                   2.285138e+02\n",
              "ATR                  2.317866e+02\n",
              "Upper Basic          1.131705e+04\n",
              "Lower Basic          9.926330e+03\n",
              "Upper Band           1.107730e+04\n",
              "Lower Band           1.010384e+04\n",
              "SuperTrend           1.105482e+04\n",
              "ST_Up                1.094519e+04\n",
              "ST_Down              1.114423e+04\n",
              "dtype: float64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DEqMVWwr03dk"
      },
      "source": [
        "nd = da['Close'].to_frame()\n",
        "for lag in [1,2,3,4,5,6,7,8,9,10]:\n",
        "  shift = lag\n",
        "  shifted = da.shift(shift)\n",
        "  shifted.columns = [str.format('%s_shifted_by_%d' % (column ,shift)) for column in shifted.columns]\n",
        "  nd = pd.concat((nd,shifted) , axis=1)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5Z7f0JM_1FvN",
        "outputId": "fd3a2c88-0b65-494d-9f8d-0381447f6315"
      },
      "source": [
        "nd.columns"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['Close', 'Open_shifted_by_1', 'High_shifted_by_1', 'Low_shifted_by_1',\n",
              "       'Close_shifted_by_1', 'Volume_shifted_by_1',\n",
              "       'Turnover (Rs. Cr)_shifted_by_1', 'Percentage Change_shifted_by_1',\n",
              "       'Pivot_shifted_by_1', 'R1_shifted_by_1',\n",
              "       ...\n",
              "       'fib_shifted_by_10', 'TR_shifted_by_10', 'ATR_shifted_by_10',\n",
              "       'Upper Basic_shifted_by_10', 'Lower Basic_shifted_by_10',\n",
              "       'Upper Band_shifted_by_10', 'Lower Band_shifted_by_10',\n",
              "       'SuperTrend_shifted_by_10', 'ST_Up_shifted_by_10',\n",
              "       'ST_Down_shifted_by_10'],\n",
              "      dtype='object', length=271)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dmYCmIIS1Hl1",
        "outputId": "a313276b-ec5f-4503-8ba7-708f48a3de46"
      },
      "source": [
        "nd.shape"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(200, 271)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "h_TT347m1Jh1",
        "outputId": "001fa6db-e68f-421e-8c3b-cb361d5bc349"
      },
      "source": [
        "nd.info()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 200 entries, 0 to 199\n",
            "Columns: 271 entries, Close to ST_Down_shifted_by_10\n",
            "dtypes: float64(271)\n",
            "memory usage: 423.6 KB\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WZAni2Po1Nse",
        "outputId": "8696fb0b-ee4e-4736-8548-6046f804d418"
      },
      "source": [
        "nd.isna().sum()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Close                        0\n",
              "Open_shifted_by_1            1\n",
              "High_shifted_by_1            1\n",
              "Low_shifted_by_1             1\n",
              "Close_shifted_by_1           1\n",
              "                            ..\n",
              "Upper Band_shifted_by_10    10\n",
              "Lower Band_shifted_by_10    10\n",
              "SuperTrend_shifted_by_10    10\n",
              "ST_Up_shifted_by_10         10\n",
              "ST_Down_shifted_by_10       10\n",
              "Length: 271, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xQMTQAqw1U1x",
        "outputId": "325940c0-9d32-4b39-9497-e9f7169b925d"
      },
      "source": [
        "nd.mean()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Close                       10721.506250\n",
              "Open_shifted_by_1           10735.659799\n",
              "High_shifted_by_1           10819.541960\n",
              "Low_shifted_by_1            10622.178141\n",
              "Close_shifted_by_1          10716.275377\n",
              "                                ...     \n",
              "Upper Band_shifted_by_10    11024.893809\n",
              "Lower Band_shifted_by_10    10039.672076\n",
              "SuperTrend_shifted_by_10    11003.540329\n",
              "ST_Up_shifted_by_10         10913.377053\n",
              "ST_Down_shifted_by_10       11123.182188\n",
              "Length: 271, dtype: float64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zNGP46MA1mVP"
      },
      "source": [
        "nd = nd.fillna(nd.mean())"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "EEeGJIso1qmh"
      },
      "source": [
        "forward_lag = 5\n",
        "nd['target'] = nd['Close'].shift(-forward_lag)\n",
        "nd = nd.drop('Close' , axis=1)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1nOOoB_X1vlP"
      },
      "source": [
        "x = nd.drop('target' , axis=1)\n",
        "y = nd['target']\n",
        "X_train , X_test , y_train ,y_test = train_test_split(x,y ,test_size=0.3 , random_state=42)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ezS_OliM103O"
      },
      "source": [
        "lso = Lasso(alpha=0.001 , max_iter = 2000)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PCiIJEky13Zp"
      },
      "source": [
        "correlations = np.abs(X_train.corrwith(y_train))\n",
        "features = list(correlations.sort_values(ascending=False)[0:50].index)\n",
        "\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NtE37nYa15Ha"
      },
      "source": [
        "X_train = X_train[features]\n",
        "X_test = X_test[features]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Tro0cUL62F75"
      },
      "source": [
        "X_train = X_train.fillna(X_train.mean())"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zutE6XKH2NVJ"
      },
      "source": [
        "X_test = X_test.fillna(X_test.mean())\n",
        "y_train = y_train.fillna(y_train.mean())\n",
        "y_test = y_test.fillna(y_test.mean())"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HVm1A76W17F4",
        "outputId": "247e5b29-87e7-489e-bfde-26d86661d858"
      },
      "source": [
        "lso.fit(X_train ,y_train)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/_coordinate_descent.py:476: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 13329415.031454792, tolerance: 20009.038943602198\n",
            "  positive)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Lasso(alpha=0.001, copy_X=True, fit_intercept=True, max_iter=2000,\n",
              "      normalize=False, positive=False, precompute=False, random_state=None,\n",
              "      selection='cyclic', tol=0.0001, warm_start=False)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WniVzG7y19FK"
      },
      "source": [
        "y_pred = lso.predict(X_test)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sr2Labol2leq",
        "outputId": "ba8348ac-4d4c-46b4-f581-b39123af961c"
      },
      "source": [
        "mean_absolute_error(y_test , y_pred)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "470.9142357099779"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SU0MB4Cs2xIs",
        "outputId": "94b3f32b-1100-4f64-b6b4-6c4a5e1394a8"
      },
      "source": [
        "(470/10125)*100 "
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "4.6419753086419755"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "L2AQR4UA25PG"
      },
      "source": [
        "len = []\n",
        "for i in range(60):\n",
        "  len.append(i) \n",
        "\n",
        "  "
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 281
        },
        "id": "mEkBSZpT3EyN",
        "outputId": "da7adc61-45ef-4af9-d47d-9839a0da368f"
      },
      "source": [
        "sns.lineplot(x=len , y=y_pred, label='Pred')\n",
        "sns.lineplot(x=len , y=y_test, label='Test')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7faf05ddc7f0>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 32
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aP6KA-Oa3Hwh",
        "outputId": "11f0722a-e70a-47ab-934d-3b4c321d52a5"
      },
      "source": [
        "y_pred"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([ 9291.25824675, 12037.55500542, 11559.66362576, 10967.68352702,\n",
              "       10828.09498879,  9930.18870763,  9925.90279664, 11617.2930627 ,\n",
              "       11123.87862361, 10818.6360573 ,  8114.5207225 , 10975.42401163,\n",
              "       11437.57303935,  9038.48014793, 10692.16196371, 11243.85311647,\n",
              "        8105.89110277, 11354.24692426,  9859.93589754,  8924.4017457 ,\n",
              "       10331.33218465, 11878.85621309, 10991.08454845,  8850.63679263,\n",
              "        8290.96133212,  8367.34466296,  9030.963651  ,  8062.0647598 ,\n",
              "       10682.0390139 , 10995.36104096, 12358.50768258, 11911.92657981,\n",
              "        8573.40375083,  8412.52228132, 11388.40808538, 10598.68584755,\n",
              "       10940.40101126, 11259.20126741, 11431.85925101,  8234.02788174,\n",
              "        9548.35099963, 11612.48651389, 11634.29854213, 11327.75435347,\n",
              "       10479.81049308, 11603.35530558, 11707.9215278 , 11847.00274353,\n",
              "       11064.49439154,  9311.70730055,  9865.17444932, 11097.31403836,\n",
              "       15825.62997452, 10894.69648958, 10793.31083629,  8908.36797379,\n",
              "       10980.60781862,  9773.67006376, 11161.58642646,  9880.03138746])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 33
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "q8_-7vXj4uq0"
      },
      "source": [],
      "execution_count": null,
      "outputs": []
    }
  ]
}